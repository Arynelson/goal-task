"""
Workflow 2: QUALIDADE DE C√ìDIGO E ARQUITETURA
Goal Task Manager - Code Quality & Architecture
"""

import sys
sys.path.append('G:/claude')

from workflow_autogen_with_retry import SimpleWorkflow

def main():
    workflow = SimpleWorkflow(
        retry_attempts=3,
        delay_between_phases=15
    )

    user_request = """
    AN√ÅLISE DE C√ìDIGO E ARQUITETURA - GOAL TASK MANAGER

    CONTEXTO:
    Aplicativo React + TypeScript com foco em manutenibilidade e escalabilidade.

    OBJETIVO:
    Melhorar qualidade do c√≥digo, arquitetura e manutenibilidade do projeto.

    √ÅREAS DE AN√ÅLISE:

    1. ARQUITETURA E ESTRUTURA (architect):
       - Revisar organiza√ß√£o de pastas
       - Analisar separa√ß√£o de responsabilidades
       - Verificar camadas (UI, l√≥gica, dados)
       - Sugerir patterns (Repository, Service, etc)
       - Avaliar escalabilidade da arquitetura
       - Revisar estrutura de m√≥dulos

    2. QUALIDADE DO TYPESCRIPT (architect + developer):
       - Eliminar uso de 'any'
       - Melhorar infer√™ncia de tipos
       - Criar interfaces e types reutiliz√°veis
       - Revisar generics
       - Implementar utility types
       - Verificar strict mode

    3. COMPONENTES REACT (developer):
       - Identificar componentes muito grandes
       - Separar l√≥gica de apresenta√ß√£o
       - Criar componentes at√¥micos/moleculares
       - Revisar props drilling
       - Implementar composition over inheritance
       - Melhorar reusabilidade

    4. HOOKS CUSTOMIZADOS (developer):
       - Revisar hooks existentes (useAuth, useGoals, useTasks)
       - Identificar l√≥gica duplicada
       - Criar novos hooks para abstrair l√≥gica
       - Otimizar depend√™ncias
       - Implementar error handling
       - Adicionar tipos corretos

    5. GERENCIAMENTO DE ESTADO (architect):
       - Avaliar estrat√©gia atual (Context API)
       - Verificar se precisa de Redux/Zustand
       - Revisar performance do Context
       - Otimizar re-renders
       - Implementar state normalization
       - Separar estados globais e locais

    6. C√ìDIGO DUPLICADO (code_reviewer):
       - Identificar c√≥digo repetido
       - Criar fun√ß√µes/componentes reutiliz√°veis
       - Implementar DRY (Don't Repeat Yourself)
       - Criar utilities compartilhados
       - Refatorar l√≥gica duplicada

    7. ERROR HANDLING (developer):
       - Implementar Error Boundaries
       - Melhorar tratamento de erros ass√≠ncronos
       - Criar error messages consistentes
       - Implementar logging estruturado
       - Adicionar fallbacks

    8. TESTES E TESTABILIDADE (qa_engineer):
       - Revisar c√≥digo test√°vel
       - Identificar depend√™ncias dif√≠ceis de mockar
       - Separar side effects
       - Implementar inje√ß√£o de depend√™ncia
       - Melhorar cobertura de testes

    9. DOCUMENTA√á√ÉO DE C√ìDIGO (doc_writer):
       - Adicionar JSDoc em fun√ß√µes complexas
       - Documentar interfaces e types
       - Criar README t√©cnico
       - Documentar decis√µes arquiteturais
       - Adicionar exemplos de uso

    ESTRUTURA ATUAL:
    ```
    src/
    ‚îú‚îÄ‚îÄ components/
    ‚îÇ   ‚îú‚îÄ‚îÄ ui/             # shadcn components
    ‚îÇ   ‚îú‚îÄ‚îÄ GoalForm.tsx
    ‚îÇ   ‚îî‚îÄ‚îÄ Layout.tsx
    ‚îú‚îÄ‚îÄ hooks/
    ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.ts
    ‚îÇ   ‚îú‚îÄ‚îÄ useGoals.ts
    ‚îÇ   ‚îî‚îÄ‚îÄ useLanguage.ts
    ‚îú‚îÄ‚îÄ pages/
    ‚îÇ   ‚îú‚îÄ‚îÄ Auth.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ Dashboard.tsx
    ‚îÇ   ‚îú‚îÄ‚îÄ Goals.tsx
    ‚îÇ   ‚îî‚îÄ‚îÄ Profile.tsx
    ‚îî‚îÄ‚îÄ lib/
        ‚îî‚îÄ‚îÄ utils.ts
    ```

    ENTREG√ÅVEIS:

    1. **Relat√≥rio de Code Smells**:
       - Lista de problemas identificados
       - Categoriza√ß√£o (cr√≠tico/alto/m√©dio/baixo)
       - M√©tricas de complexidade
       - Sugest√µes de refatora√ß√£o

    2. **Plano de Refatora√ß√£o**:
       - Prioriza√ß√£o de melhorias
       - Estimativa de esfor√ßo
       - Roadmap de implementa√ß√£o
       - Quick wins (impacto alto, esfor√ßo baixo)

    3. **C√≥digo Refatorado**:
       - Exemplos de c√≥digo melhorado
       - Novos hooks customizados
       - Componentes otimizados
       - Utilities criados

    4. **Guia de Arquitetura**:
       - Padr√µes a seguir
       - Estrutura de pastas recomendada
       - Conven√ß√µes de c√≥digo
       - Boas pr√°ticas React/TypeScript

    5. **Documenta√ß√£o T√©cnica**:
       - ADRs (Architecture Decision Records)
       - Diagramas de arquitetura
       - Guia de contribui√ß√£o
       - Style guide

    FOCO: MANUTENIBILIDADE E ESCALABILIDADE
    C√≥digo limpo facilita evolu√ß√£o e reduz bugs.
    """

    print("\n" + "="*80)
    print("WORKFLOW 2: QUALIDADE DE C√ìDIGO E ARQUITETURA")
    print("Goal Task Manager - Code Quality & Architecture")
    print("="*80 + "\n")

    results = workflow.run(user_request, save_plan=True)

    if results:
        workflow.save_results(results)
        print("\n[DONE] An√°lise de c√≥digo conclu√≠da!")
        print(f"Resultados salvos em: outputs/")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Revisar code smells identificados")
        print("2. Implementar quick wins")
        print("3. Planejar refatora√ß√µes maiores")
        print("4. Seguir guia de arquitetura")
    else:
        print("\n[CANCEL] Workflow cancelado.")

if __name__ == "__main__":
    main()
